// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include <windows.h>
#include <winuser.h>
#include <processthreadsapi.h>

struct param {
    unsigned long ulPID;
    HWND hWnd_out;
};

BOOL CALLBACK enum_windows_callback(HWND handle, LPARAM lParam) {
    param *param_data = (param*)lParam;
    unsigned long process_id = 0;
    GetWindowThreadProcessId(handle, &process_id);
    if (param_data->ulPID != process_id)
        return TRUE;

    param_data->hWnd_out = handle;
    return FALSE;
}

HWND find_specific_window(unsigned long process_id) {
    param param_data;
    param_data.ulPID = process_id;
    param_data.hWnd_out = 0;
    EnumWindows(enum_windows_callback, (LPARAM)&param_data);
    return param_data.hWnd_out;
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    DWORD pid = GetCurrentProcessId();
    HWND window = find_specific_window(pid);
    char proc_name[MAX_PATH] = { 0 };
    GetWindowText(window, (LPWSTR)proc_name, MAX_PATH);

    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        MessageBox(NULL, (LPCWSTR)proc_name, L"DLL Run", NULL);
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }

    return TRUE;
}

