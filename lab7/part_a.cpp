// dllmain.cpp : Defines the entry point for the DLL application.
#include "pch.h"
#include "detours.h"
#include <Windows.h>
#include <fileapi.h>
#include <synchapi.h>
#include <stdio.h>
#include <cstdio>

BOOL(WINAPI* True_MessageBox)(HWND, LPCTSTR, LPCTSTR, UINT) = MessageBox;
HANDLE(WINAPI* True_CreateFile)(LPCTSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE) = CreateFile;
void(WINAPI* True_Sleep)(DWORD) = Sleep;

BOOL WINAPI HookedMessageBox(HWND hWnd, LPCTSTR test, LPCTSTR title, UINT uType) {
    //MessageBox(NULL, L"Hooked Message Box", L"Hook", 0);
    return True_MessageBox(hWnd, test, L"Changed title", uType);
}

HANDLE WINAPI HookedCreateFile(LPCTSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition, DWORD dwFlageAndAttributes, HANDLE hTemplateFile) {

    MessageBox(NULL, lpFileName, L"Hook", 0);
    /*FILE* file;
    fopen_s(&file, "C:log.txt", "a+");
    fprintf(file, "Create file called on %s\n", lpFileName);
    fclose(file);*/

    return True_CreateFile(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlageAndAttributes, hTemplateFile);
}

void WINAPI HookedSleep(DWORD dwMilliseconds) {
    //MessageBox(NULL, L"Hooked Sleep", L"Hook", 0);
    return;
}

BOOL APIENTRY DllMain(HMODULE hModule,
    DWORD  ul_reason_for_call,
    LPVOID lpReserved
)
{
    LONG lError;
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        DetourTransactionBegin();
        DetourUpdateThread(GetCurrentThread());
        DetourAttach(&(PVOID&)True_MessageBox, HookedMessageBox);
        DetourAttach(&(PVOID&)True_CreateFile, HookedCreateFile);
        DetourAttach(&(PVOID&)True_Sleep, HookedSleep);

        lError = DetourTransactionCommit();
        if (lError != NO_ERROR) {
            MessageBox(HWND_DESKTOP, L"Failed to attach", L"ERROR", 0);
            return FALSE;
        }
        break;
    case DLL_PROCESS_DETACH:
        DetourTransactionBegin();
        DetourUpdateThread(GetCurrentThread());
        DetourDetach(&(PVOID&)True_MessageBox, HookedMessageBox);
        DetourDetach(&(PVOID&)True_CreateFile, HookedCreateFile);
        DetourDetach(&(PVOID&)True_Sleep, HookedSleep);

        lError = DetourTransactionCommit();
        if (lError != NO_ERROR) {
            MessageBox(HWND_DESKTOP, L"Failed to detach", L"ERROR", 0);
            return FALSE;
        }
        break;
    }
    return TRUE;
}

